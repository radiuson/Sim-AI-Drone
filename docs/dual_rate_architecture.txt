双频率推理架构图
================================================================================

标准模式 (30Hz 单线程)
────────────────────────────────────────────────────────────────────────────

  主线程 (30Hz)
  ┌─────────────────────────────────────────────────────────────────┐
  │                                                                   │
  │  ┌────────┐    ┌──────────────┐    ┌─────────┐    ┌──────────┐ │
  │  │ Screen │───▶│Visual Encoder│───▶│  Fusion │───▶│Action Gen│ │
  │  │Capture │    │(EfficientNet)│    │ + State │    │  (DDPM)  │ │
  │  └────────┘    └──────────────┘    └─────────┘    └──────────┘ │
  │                                                                   │
  │      5ms            20ms               3ms            8ms        │
  │                                                                   │
  │  Total: ~36ms/frame → 最大 27.8Hz                                 │
  └─────────────────────────────────────────────────────────────────┘


双频率模式 (30Hz 视觉 + 100Hz 动作)
────────────────────────────────────────────────────────────────────────────

  视觉线程 (30Hz - 后台运行)
  ┌─────────────────────────────────────────────────────────┐
  │                                                           │
  │  ┌────────┐    ┌──────────────┐    ┌────────────────┐   │
  │  │ Screen │───▶│Visual Encoder│───▶│ Visual Feature │   │
  │  │Capture │    │(EfficientNet)│    │     Cache      │   │
  │  └────────┘    └──────────────┘    └────────────────┘   │
  │                                              │            │
  │      5ms            20ms                     │            │
  │                                              │            │
  │  Loop: 33.3ms/iteration (30Hz)              │            │
  └─────────────────────────────────────────────┼────────────┘
                                                 │
                                        threading.Lock
                                                 │
  ┌─────────────────────────────────────────────┼────────────┐
  │  主线程 (100Hz - 动作控制)                   ▼            │
  │                                    ┌────────────────┐     │
  │                                    │ Visual Feature │     │
  │                                    │     Cache      │     │
  │                                    └────────┬───────┘     │
  │                                             │             │
  │                                             │             │
  │  ┌────────┐                       ┌────────▼────┐        │
  │  │ State  │──────────────────────▶│   Fusion    │        │
  │  │+ Action│                       │  (Concat +  │        │
  │  │History │                       │   Proj)     │        │
  │  └────────┘                       └─────┬───────┘        │
  │                                          │                │
  │                                          │                │
  │                                   ┌──────▼──────┐         │
  │                                   │ Action Gen  │         │
  │                                   │   (DDPM)    │         │
  │                                   └──────┬──────┘         │
  │                                          │                │
  │                                          ▼                │
  │                                   ┌─────────────┐         │
  │                                   │   Output    │         │
  │                                   │   Action    │         │
  │                                   └─────────────┘         │
  │                                                            │
  │      <1ms            3ms              8ms                 │
  │                                                            │
  │  Loop: 10ms/iteration (100Hz)                             │
  └────────────────────────────────────────────────────────────┘


性能对比
────────────────────────────────────────────────────────────────────────────

  指标                  标准模式 (30Hz)     双频率模式           提升
  ──────────────────────────────────────────────────────────────────────
  视觉编码频率          30Hz                30Hz                 -
  动作预测频率          30Hz                100Hz                +233%
  控制延迟              ~36ms               ~12ms                -67%
  视觉延迟              0ms                 0-33ms               可接受
  GPU利用率             60%                 85%                  +25%
  内存开销              基线                +1KB                 可忽略


数据流示意
────────────────────────────────────────────────────────────────────────────

时间轴 (双频率模式):

  0ms      10ms     20ms     30ms     40ms     50ms     60ms     70ms
  ├────────┼────────┼────────┼────────┼────────┼────────┼────────┼────────

  视觉线程 (30Hz):
  ┌───────────────────────────────┐          ┌─────────────────────────
  │  Encode Frame 0               │          │  Encode Frame 1
  └───────────────────────────────┘          └─────────────────────────
           ▲                                          ▲
           │ 更新缓存                                 │ 更新缓存
           ▼                                          ▼
         Cache                                      Cache

  动作线程 (100Hz):
  ┌────┐  ┌────┐  ┌────┐  ┌────┐  ┌────┐  ┌────┐  ┌────┐  ┌────┐
  │Act0│  │Act1│  │Act2│  │Act3│  │Act4│  │Act5│  │Act6│  │Act7│
  └────┘  └────┘  └────┘  └────┘  └────┘  └────┘  └────┘  └────┘
    │       │       │       │       │       │       │       │
    └───────┴───────┴───────┘       └───────┴───────┴───────┘
          使用 Frame 0                     使用 Frame 1
          的视觉特征                       的视觉特征


关键设计点
────────────────────────────────────────────────────────────────────────────

1. 线程安全
   - 使用 threading.Lock 保护视觉特征缓存
   - 读写分离：视觉线程写入，动作线程读取
   - 无死锁风险

2. 缓存策略
   - 视觉特征缓存：单个张量 [1, base_dim]
   - 更新频率：30Hz (33.3ms)
   - 读取频率：100Hz (10ms)
   - 最大延迟：33ms

3. 向后兼容
   - 保留原有 encode_observation() 方法
   - 标准模式仍然可用
   - 检查点无需修改

4. 错误处理
   - 模型不支持 → 自动降级到标准模式
   - 缓存未就绪 → 返回上一个动作
   - 线程异常 → 安全关闭

5. 资源管理
   - 守护线程：主线程退出时自动清理
   - 显式停止：finally块中调用stop_visual_encoding_thread()
   - 超时保护：join(timeout=2.0)


适用场景
────────────────────────────────────────────────────────────────────────────

推荐使用双频率模式:
  ✅ TOGE策略（大型视觉backbone）
  ✅ 需要高频控制（竞速、特技）
  ✅ GPU推理（并行能力强）
  ✅ 视觉场景平稳变化

不推荐使用双频率模式:
  ❌ ResNet-UNet策略（已经很快）
  ❌ CPU推理（线程切换开销大）
  ❌ 剧烈场景变化（缓存失效快）
  ❌ 调试模式（需要实时可视化）


使用示例
────────────────────────────────────────────────────────────────────────────

# 启用双频率推理（推荐配置）
python -m deploy.run_policy \
  --policy toge \
  --checkpoint outputs/toge_best.pt \
  --window-name "Liftoff" \
  --dual-rate \
  --visual-rate 30 \
  --action-rate 100

# 标准模式（对比基准）
python -m deploy.run_policy \
  --policy toge \
  --checkpoint outputs/toge_best.pt \
  --window-name "Liftoff" \
  --rate 30

# 高性能配置（60Hz视觉 + 120Hz动作）
python -m deploy.run_policy \
  --policy toge \
  --checkpoint outputs/toge_best.pt \
  --window-name "Liftoff" \
  --dual-rate \
  --visual-rate 60 \
  --action-rate 120


总结
────────────────────────────────────────────────────────────────────────────

双频率推理通过异步架构，将计算密集的视觉编码与轻量级的动作生成分离：

  - 视觉线程：30Hz 后台运行，持续更新视觉特征缓存
  - 动作线程：100Hz 主循环，使用缓存快速生成动作

性能提升：
  - 控制频率：30Hz → 100Hz (+233%)
  - 控制延迟：36ms → 12ms (-67%)
  - 动作平滑度：显著提升

代价：
  - 视觉延迟：0-33ms（通常可接受）
  - GPU利用率：+25%（充分利用硬件）
  - 代码复杂度：+线程同步逻辑

适用于需要高频响应的飞行场景，特别是使用大型视觉模型的策略。
